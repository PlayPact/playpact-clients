/*
 * PlayPact API
 * The API for PlayPact.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@playpact.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.EvidenceDto;
import org.openapitools.client.model.UserListDto;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ObjectionDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-27T21:45:49.723319836Z[Etc/UTC]", comments = "Generator version: 7.6.0-SNAPSHOT")
public class ObjectionDto {
  public static final String SERIALIZED_NAME_PLAY_PACT_OBJECTION_ID = "playPactObjectionId";
  @SerializedName(SERIALIZED_NAME_PLAY_PACT_OBJECTION_ID)
  private UUID playPactObjectionId;

  public static final String SERIALIZED_NAME_STATEMENT = "statement";
  @SerializedName(SERIALIZED_NAME_STATEMENT)
  private String statement;

  public static final String SERIALIZED_NAME_EVIDENCE = "evidence";
  @SerializedName(SERIALIZED_NAME_EVIDENCE)
  private List<EvidenceDto> evidence;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private UserListDto creator;

  public ObjectionDto() {
  }

  public ObjectionDto playPactObjectionId(UUID playPactObjectionId) {
    this.playPactObjectionId = playPactObjectionId;
    return this;
  }

   /**
   * Get playPactObjectionId
   * @return playPactObjectionId
  **/
  @javax.annotation.Nullable
  public UUID getPlayPactObjectionId() {
    return playPactObjectionId;
  }

  public void setPlayPactObjectionId(UUID playPactObjectionId) {
    this.playPactObjectionId = playPactObjectionId;
  }


  public ObjectionDto statement(String statement) {
    this.statement = statement;
    return this;
  }

   /**
   * Get statement
   * @return statement
  **/
  @javax.annotation.Nullable
  public String getStatement() {
    return statement;
  }

  public void setStatement(String statement) {
    this.statement = statement;
  }


  public ObjectionDto evidence(List<EvidenceDto> evidence) {
    this.evidence = evidence;
    return this;
  }

  public ObjectionDto addEvidenceItem(EvidenceDto evidenceItem) {
    if (this.evidence == null) {
      this.evidence = new ArrayList<>();
    }
    this.evidence.add(evidenceItem);
    return this;
  }

   /**
   * Get evidence
   * @return evidence
  **/
  @javax.annotation.Nullable
  public List<EvidenceDto> getEvidence() {
    return evidence;
  }

  public void setEvidence(List<EvidenceDto> evidence) {
    this.evidence = evidence;
  }


  public ObjectionDto creator(UserListDto creator) {
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @javax.annotation.Nullable
  public UserListDto getCreator() {
    return creator;
  }

  public void setCreator(UserListDto creator) {
    this.creator = creator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectionDto objectionDto = (ObjectionDto) o;
    return Objects.equals(this.playPactObjectionId, objectionDto.playPactObjectionId) &&
        Objects.equals(this.statement, objectionDto.statement) &&
        Objects.equals(this.evidence, objectionDto.evidence) &&
        Objects.equals(this.creator, objectionDto.creator);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(playPactObjectionId, statement, evidence, creator);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectionDto {\n");
    sb.append("    playPactObjectionId: ").append(toIndentedString(playPactObjectionId)).append("\n");
    sb.append("    statement: ").append(toIndentedString(statement)).append("\n");
    sb.append("    evidence: ").append(toIndentedString(evidence)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("playPactObjectionId");
    openapiFields.add("statement");
    openapiFields.add("evidence");
    openapiFields.add("creator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObjectionDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectionDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectionDto is not found in the empty JSON string", ObjectionDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjectionDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjectionDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("playPactObjectionId") != null && !jsonObj.get("playPactObjectionId").isJsonNull()) && !jsonObj.get("playPactObjectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playPactObjectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playPactObjectionId").toString()));
      }
      if ((jsonObj.get("statement") != null && !jsonObj.get("statement").isJsonNull()) && !jsonObj.get("statement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement").toString()));
      }
      if (jsonObj.get("evidence") != null && !jsonObj.get("evidence").isJsonNull()) {
        JsonArray jsonArrayevidence = jsonObj.getAsJsonArray("evidence");
        if (jsonArrayevidence != null) {
          // ensure the json data is an array
          if (!jsonObj.get("evidence").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `evidence` to be an array in the JSON string but got `%s`", jsonObj.get("evidence").toString()));
          }

          // validate the optional field `evidence` (array)
          for (int i = 0; i < jsonArrayevidence.size(); i++) {
            EvidenceDto.validateJsonElement(jsonArrayevidence.get(i));
          };
        }
      }
      // validate the optional field `creator`
      if (jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) {
        UserListDto.validateJsonElement(jsonObj.get("creator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectionDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectionDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectionDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectionDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectionDto>() {
           @Override
           public void write(JsonWriter out, ObjectionDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectionDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjectionDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjectionDto
  * @throws IOException if the JSON string is invalid with respect to ObjectionDto
  */
  public static ObjectionDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectionDto.class);
  }

 /**
  * Convert an instance of ObjectionDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


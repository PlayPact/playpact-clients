/*
 * PlayPact API
 * The API for PlayPact.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@playpact.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ReportListDto;
import org.openapitools.client.model.ReviewEvaluation;
import org.openapitools.client.model.RuleListDto;
import org.openapitools.client.model.UserListDto;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReviewDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-27T21:45:49.723319836Z[Etc/UTC]", comments = "Generator version: 7.6.0-SNAPSHOT")
public class ReviewDto {
  public static final String SERIALIZED_NAME_PLAY_PACT_REVIEW_ID = "playPactReviewId";
  @SerializedName(SERIALIZED_NAME_PLAY_PACT_REVIEW_ID)
  private UUID playPactReviewId;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private UserListDto creator;

  public static final String SERIALIZED_NAME_REVIEWED_REPORT = "reviewedReport";
  @SerializedName(SERIALIZED_NAME_REVIEWED_REPORT)
  private ReportListDto reviewedReport;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "lastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<RuleListDto> rules;

  public static final String SERIALIZED_NAME_EVALUATION = "evaluation";
  @SerializedName(SERIALIZED_NAME_EVALUATION)
  private ReviewEvaluation evaluation;

  public ReviewDto() {
  }

  public ReviewDto playPactReviewId(UUID playPactReviewId) {
    this.playPactReviewId = playPactReviewId;
    return this;
  }

   /**
   * Get playPactReviewId
   * @return playPactReviewId
  **/
  @javax.annotation.Nullable
  public UUID getPlayPactReviewId() {
    return playPactReviewId;
  }

  public void setPlayPactReviewId(UUID playPactReviewId) {
    this.playPactReviewId = playPactReviewId;
  }


  public ReviewDto creator(UserListDto creator) {
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @javax.annotation.Nullable
  public UserListDto getCreator() {
    return creator;
  }

  public void setCreator(UserListDto creator) {
    this.creator = creator;
  }


  public ReviewDto reviewedReport(ReportListDto reviewedReport) {
    this.reviewedReport = reviewedReport;
    return this;
  }

   /**
   * Get reviewedReport
   * @return reviewedReport
  **/
  @javax.annotation.Nullable
  public ReportListDto getReviewedReport() {
    return reviewedReport;
  }

  public void setReviewedReport(ReportListDto reviewedReport) {
    this.reviewedReport = reviewedReport;
  }


  public ReviewDto creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public ReviewDto lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

   /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public ReviewDto reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public ReviewDto rules(List<RuleListDto> rules) {
    this.rules = rules;
    return this;
  }

  public ReviewDto addRulesItem(RuleListDto rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Get rules
   * @return rules
  **/
  @javax.annotation.Nullable
  public List<RuleListDto> getRules() {
    return rules;
  }

  public void setRules(List<RuleListDto> rules) {
    this.rules = rules;
  }


  public ReviewDto evaluation(ReviewEvaluation evaluation) {
    this.evaluation = evaluation;
    return this;
  }

   /**
   * Get evaluation
   * @return evaluation
  **/
  @javax.annotation.Nullable
  public ReviewEvaluation getEvaluation() {
    return evaluation;
  }

  public void setEvaluation(ReviewEvaluation evaluation) {
    this.evaluation = evaluation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReviewDto reviewDto = (ReviewDto) o;
    return Objects.equals(this.playPactReviewId, reviewDto.playPactReviewId) &&
        Objects.equals(this.creator, reviewDto.creator) &&
        Objects.equals(this.reviewedReport, reviewDto.reviewedReport) &&
        Objects.equals(this.creationDate, reviewDto.creationDate) &&
        Objects.equals(this.lastUpdatedAt, reviewDto.lastUpdatedAt) &&
        Objects.equals(this.reason, reviewDto.reason) &&
        Objects.equals(this.rules, reviewDto.rules) &&
        Objects.equals(this.evaluation, reviewDto.evaluation);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(playPactReviewId, creator, reviewedReport, creationDate, lastUpdatedAt, reason, rules, evaluation);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReviewDto {\n");
    sb.append("    playPactReviewId: ").append(toIndentedString(playPactReviewId)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    reviewedReport: ").append(toIndentedString(reviewedReport)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    evaluation: ").append(toIndentedString(evaluation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("playPactReviewId");
    openapiFields.add("creator");
    openapiFields.add("reviewedReport");
    openapiFields.add("creationDate");
    openapiFields.add("lastUpdatedAt");
    openapiFields.add("reason");
    openapiFields.add("rules");
    openapiFields.add("evaluation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReviewDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReviewDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReviewDto is not found in the empty JSON string", ReviewDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReviewDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReviewDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("playPactReviewId") != null && !jsonObj.get("playPactReviewId").isJsonNull()) && !jsonObj.get("playPactReviewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playPactReviewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playPactReviewId").toString()));
      }
      // validate the optional field `creator`
      if (jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) {
        UserListDto.validateJsonElement(jsonObj.get("creator"));
      }
      // validate the optional field `reviewedReport`
      if (jsonObj.get("reviewedReport") != null && !jsonObj.get("reviewedReport").isJsonNull()) {
        ReportListDto.validateJsonElement(jsonObj.get("reviewedReport"));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            RuleListDto.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
      // validate the optional field `evaluation`
      if (jsonObj.get("evaluation") != null && !jsonObj.get("evaluation").isJsonNull()) {
        ReviewEvaluation.validateJsonElement(jsonObj.get("evaluation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReviewDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReviewDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReviewDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReviewDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ReviewDto>() {
           @Override
           public void write(JsonWriter out, ReviewDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReviewDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReviewDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReviewDto
  * @throws IOException if the JSON string is invalid with respect to ReviewDto
  */
  public static ReviewDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReviewDto.class);
  }

 /**
  * Convert an instance of ReviewDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


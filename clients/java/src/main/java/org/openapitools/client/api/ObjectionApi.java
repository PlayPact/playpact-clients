/*
 * PlayPact API
 * The API for PlayPact.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@playpact.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateObjectionDto;
import org.openapitools.client.model.ObjectionDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMyObjection
     * @param createObjectionDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMyObjectionCall(CreateObjectionDto createObjectionDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createObjectionDto;

        // create path and map variables
        String localVarPath = "/api/Objection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMyObjectionValidateBeforeCall(CreateObjectionDto createObjectionDto, final ApiCallback _callback) throws ApiException {
        return createMyObjectionCall(createObjectionDto, _callback);

    }

    /**
     * Creates a objection.
     * 
     * @param createObjectionDto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void createMyObjection(CreateObjectionDto createObjectionDto) throws ApiException {
        createMyObjectionWithHttpInfo(createObjectionDto);
    }

    /**
     * Creates a objection.
     * 
     * @param createObjectionDto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createMyObjectionWithHttpInfo(CreateObjectionDto createObjectionDto) throws ApiException {
        okhttp3.Call localVarCall = createMyObjectionValidateBeforeCall(createObjectionDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a objection. (asynchronously)
     * 
     * @param createObjectionDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMyObjectionAsync(CreateObjectionDto createObjectionDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMyObjectionValidateBeforeCall(createObjectionDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMyObjection
     * @param playPactReportId Play pact id of the report to get the objection for. (optional)
     * @param playPactUserId Play pact id of the requesting user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyObjectionCall(UUID playPactReportId, UUID playPactUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Objection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playPactReportId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playPactReportId", playPactReportId));
        }

        if (playPactUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playPactUserId", playPactUserId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyObjectionValidateBeforeCall(UUID playPactReportId, UUID playPactUserId, final ApiCallback _callback) throws ApiException {
        return getMyObjectionCall(playPactReportId, playPactUserId, _callback);

    }

    /**
     * Gets the objection for a report with more details.  Only works for the user who created the report.
     * 
     * @param playPactReportId Play pact id of the report to get the objection for. (optional)
     * @param playPactUserId Play pact id of the requesting user. (optional)
     * @return ObjectionDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ObjectionDto getMyObjection(UUID playPactReportId, UUID playPactUserId) throws ApiException {
        ApiResponse<ObjectionDto> localVarResp = getMyObjectionWithHttpInfo(playPactReportId, playPactUserId);
        return localVarResp.getData();
    }

    /**
     * Gets the objection for a report with more details.  Only works for the user who created the report.
     * 
     * @param playPactReportId Play pact id of the report to get the objection for. (optional)
     * @param playPactUserId Play pact id of the requesting user. (optional)
     * @return ApiResponse&lt;ObjectionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectionDto> getMyObjectionWithHttpInfo(UUID playPactReportId, UUID playPactUserId) throws ApiException {
        okhttp3.Call localVarCall = getMyObjectionValidateBeforeCall(playPactReportId, playPactUserId, null);
        Type localVarReturnType = new TypeToken<ObjectionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the objection for a report with more details.  Only works for the user who created the report. (asynchronously)
     * 
     * @param playPactReportId Play pact id of the report to get the objection for. (optional)
     * @param playPactUserId Play pact id of the requesting user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyObjectionAsync(UUID playPactReportId, UUID playPactUserId, final ApiCallback<ObjectionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyObjectionValidateBeforeCall(playPactReportId, playPactUserId, _callback);
        Type localVarReturnType = new TypeToken<ObjectionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjection
     * @param playPactReportId Play pact id of the report to get the objection for. (required)
     * @param playPactUserId Play pact id of the requesting user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectionCall(UUID playPactReportId, UUID playPactUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Objection/{playPactReportId}"
            .replace("{" + "playPactReportId" + "}", localVarApiClient.escapeString(playPactReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playPactUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playPactUserId", playPactUserId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectionValidateBeforeCall(UUID playPactReportId, UUID playPactUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playPactReportId' is set
        if (playPactReportId == null) {
            throw new ApiException("Missing the required parameter 'playPactReportId' when calling getObjection(Async)");
        }

        return getObjectionCall(playPactReportId, playPactUserId, _callback);

    }

    /**
     * Gets the objection for a report.
     * 
     * @param playPactReportId Play pact id of the report to get the objection for. (required)
     * @param playPactUserId Play pact id of the requesting user. (optional)
     * @return ObjectionDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ObjectionDto getObjection(UUID playPactReportId, UUID playPactUserId) throws ApiException {
        ApiResponse<ObjectionDto> localVarResp = getObjectionWithHttpInfo(playPactReportId, playPactUserId);
        return localVarResp.getData();
    }

    /**
     * Gets the objection for a report.
     * 
     * @param playPactReportId Play pact id of the report to get the objection for. (required)
     * @param playPactUserId Play pact id of the requesting user. (optional)
     * @return ApiResponse&lt;ObjectionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectionDto> getObjectionWithHttpInfo(UUID playPactReportId, UUID playPactUserId) throws ApiException {
        okhttp3.Call localVarCall = getObjectionValidateBeforeCall(playPactReportId, playPactUserId, null);
        Type localVarReturnType = new TypeToken<ObjectionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the objection for a report. (asynchronously)
     * 
     * @param playPactReportId Play pact id of the report to get the objection for. (required)
     * @param playPactUserId Play pact id of the requesting user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectionAsync(UUID playPactReportId, UUID playPactUserId, final ApiCallback<ObjectionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectionValidateBeforeCall(playPactReportId, playPactUserId, _callback);
        Type localVarReturnType = new TypeToken<ObjectionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMyObjection
     * @param playPactObjectionId  (optional)
     * @param objectionDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMyObjectionCall(UUID playPactObjectionId, ObjectionDto objectionDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = objectionDto;

        // create path and map variables
        String localVarPath = "/api/Objection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (playPactObjectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playPactObjectionId", playPactObjectionId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMyObjectionValidateBeforeCall(UUID playPactObjectionId, ObjectionDto objectionDto, final ApiCallback _callback) throws ApiException {
        return updateMyObjectionCall(playPactObjectionId, objectionDto, _callback);

    }

    /**
     * TODO: Updates a objection.
     * 
     * @param playPactObjectionId  (optional)
     * @param objectionDto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateMyObjection(UUID playPactObjectionId, ObjectionDto objectionDto) throws ApiException {
        updateMyObjectionWithHttpInfo(playPactObjectionId, objectionDto);
    }

    /**
     * TODO: Updates a objection.
     * 
     * @param playPactObjectionId  (optional)
     * @param objectionDto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMyObjectionWithHttpInfo(UUID playPactObjectionId, ObjectionDto objectionDto) throws ApiException {
        okhttp3.Call localVarCall = updateMyObjectionValidateBeforeCall(playPactObjectionId, objectionDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * TODO: Updates a objection. (asynchronously)
     * 
     * @param playPactObjectionId  (optional)
     * @param objectionDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMyObjectionAsync(UUID playPactObjectionId, ObjectionDto objectionDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMyObjectionValidateBeforeCall(playPactObjectionId, objectionDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}

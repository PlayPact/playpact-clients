/*
 * PlayPact API
 *
 * The API for PlayPact.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@playpact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PlayPact.OpenAPI.Client;
using PlayPact.OpenAPI.Model;

namespace PlayPact.OpenAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a report.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMyReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateMyReport(CreateMyReportDto createMyReportDto = default(CreateMyReportDto), int operationIndex = 0);

        /// <summary>
        /// Creates a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMyReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateMyReportWithHttpInfo(CreateMyReportDto createMyReportDto = default(CreateMyReportDto), int operationIndex = 0);
        /// <summary>
        /// Deletes a report.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playpactReportId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteReport(Guid? playpactReportId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Deletes a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playpactReportId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReportWithHttpInfo(Guid? playpactReportId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Gets your report.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MyReportDto</returns>
        MyReportDto GetMyReport(Guid playPactReportId, int operationIndex = 0);

        /// <summary>
        /// Gets your report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MyReportDto</returns>
        ApiResponse<MyReportDto> GetMyReportWithHttpInfo(Guid playPactReportId, int operationIndex = 0);
        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MyReportListDto&gt;</returns>
        List<MyReportListDto> GetMyReports(Guid playPactUserId, int operationIndex = 0);

        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MyReportListDto&gt;</returns>
        ApiResponse<List<MyReportListDto>> GetMyReportsWithHttpInfo(Guid playPactUserId, int operationIndex = 0);
        /// <summary>
        /// Gets a report.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportDto</returns>
        ReportDto GetReport(Guid playPactReportId, int operationIndex = 0);

        /// <summary>
        /// Gets a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportDto</returns>
        ApiResponse<ReportDto> GetReportWithHttpInfo(Guid playPactReportId, int operationIndex = 0);
        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReviewerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ReportListDto&gt;</returns>
        List<ReportListDto> GetReviewReports(Guid playPactReviewerId, int operationIndex = 0);

        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReviewerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ReportListDto&gt;</returns>
        ApiResponse<List<ReportListDto>> GetReviewReportsWithHttpInfo(Guid playPactReviewerId, int operationIndex = 0);
        /// <summary>
        /// Gets a verdict.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerdictDto</returns>
        VerdictDto GetVerdict(Guid playPactReportId, int operationIndex = 0);

        /// <summary>
        /// Gets a verdict.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerdictDto</returns>
        ApiResponse<VerdictDto> GetVerdictWithHttpInfo(Guid playPactReportId, int operationIndex = 0);
        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;VerdictListDto&gt;</returns>
        List<VerdictListDto> GetVerdicts(Guid playPactUserId, int operationIndex = 0);

        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;VerdictListDto&gt;</returns>
        ApiResponse<List<VerdictListDto>> GetVerdictsWithHttpInfo(Guid playPactUserId, int operationIndex = 0);
        /// <summary>
        /// Updates a report.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="myReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateMyReport(Guid? playPactUserId = default(Guid?), MyReportDto myReportDto = default(MyReportDto), int operationIndex = 0);

        /// <summary>
        /// Updates a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="myReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMyReportWithHttpInfo(Guid? playPactUserId = default(Guid?), MyReportDto myReportDto = default(MyReportDto), int operationIndex = 0);
        /// <summary>
        /// Updates a report status.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="reportStatus"> (optional)</param>
        /// <param name="isSystemUpdate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateReportStatus(Guid playPactReportId, Guid? playPactUserId = default(Guid?), ReportStatus? reportStatus = default(ReportStatus?), bool? isSystemUpdate = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Updates a report status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="reportStatus"> (optional)</param>
        /// <param name="isSystemUpdate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateReportStatusWithHttpInfo(Guid playPactReportId, Guid? playPactUserId = default(Guid?), ReportStatus? reportStatus = default(ReportStatus?), bool? isSystemUpdate = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMyReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateMyReportAsync(CreateMyReportDto createMyReportDto = default(CreateMyReportDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMyReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateMyReportWithHttpInfoAsync(CreateMyReportDto createMyReportDto = default(CreateMyReportDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playpactReportId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReportAsync(Guid? playpactReportId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playpactReportId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReportWithHttpInfoAsync(Guid? playpactReportId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets your report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MyReportDto</returns>
        System.Threading.Tasks.Task<MyReportDto> GetMyReportAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets your report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MyReportDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MyReportDto>> GetMyReportWithHttpInfoAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MyReportListDto&gt;</returns>
        System.Threading.Tasks.Task<List<MyReportListDto>> GetMyReportsAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MyReportListDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MyReportListDto>>> GetMyReportsWithHttpInfoAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportDto</returns>
        System.Threading.Tasks.Task<ReportDto> GetReportAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportDto>> GetReportWithHttpInfoAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReviewerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ReportListDto&gt;</returns>
        System.Threading.Tasks.Task<List<ReportListDto>> GetReviewReportsAsync(Guid playPactReviewerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReviewerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ReportListDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReportListDto>>> GetReviewReportsWithHttpInfoAsync(Guid playPactReviewerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a verdict.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerdictDto</returns>
        System.Threading.Tasks.Task<VerdictDto> GetVerdictAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a verdict.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerdictDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerdictDto>> GetVerdictWithHttpInfoAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VerdictListDto&gt;</returns>
        System.Threading.Tasks.Task<List<VerdictListDto>> GetVerdictsAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all reports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VerdictListDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VerdictListDto>>> GetVerdictsWithHttpInfoAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="myReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMyReportAsync(Guid? playPactUserId = default(Guid?), MyReportDto myReportDto = default(MyReportDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="myReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMyReportWithHttpInfoAsync(Guid? playPactUserId = default(Guid?), MyReportDto myReportDto = default(MyReportDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a report status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="reportStatus"> (optional)</param>
        /// <param name="isSystemUpdate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateReportStatusAsync(Guid playPactReportId, Guid? playPactUserId = default(Guid?), ReportStatus? reportStatus = default(ReportStatus?), bool? isSystemUpdate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a report status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="reportStatus"> (optional)</param>
        /// <param name="isSystemUpdate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateReportStatusWithHttpInfoAsync(Guid playPactReportId, Guid? playPactUserId = default(Guid?), ReportStatus? reportStatus = default(ReportStatus?), bool? isSystemUpdate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportApi : IReportApiSync, IReportApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportApi : IReportApi
    {
        private PlayPact.OpenAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportApi(string basePath)
        {
            this.Configuration = PlayPact.OpenAPI.Client.Configuration.MergeConfigurations(
                PlayPact.OpenAPI.Client.GlobalConfiguration.Instance,
                new PlayPact.OpenAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PlayPact.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PlayPact.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PlayPact.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportApi(PlayPact.OpenAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PlayPact.OpenAPI.Client.Configuration.MergeConfigurations(
                PlayPact.OpenAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PlayPact.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PlayPact.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PlayPact.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReportApi(PlayPact.OpenAPI.Client.ISynchronousClient client, PlayPact.OpenAPI.Client.IAsynchronousClient asyncClient, PlayPact.OpenAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PlayPact.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PlayPact.OpenAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PlayPact.OpenAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PlayPact.OpenAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PlayPact.OpenAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMyReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateMyReport(CreateMyReportDto createMyReportDto = default(CreateMyReportDto), int operationIndex = 0)
        {
            CreateMyReportWithHttpInfo(createMyReportDto);
        }

        /// <summary>
        /// Creates a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMyReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<Object> CreateMyReportWithHttpInfo(CreateMyReportDto createMyReportDto = default(CreateMyReportDto), int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMyReportDto;

            localVarRequestOptions.Operation = "ReportApi.CreateMyReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Report", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMyReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMyReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateMyReportAsync(CreateMyReportDto createMyReportDto = default(CreateMyReportDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateMyReportWithHttpInfoAsync(createMyReportDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMyReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<Object>> CreateMyReportWithHttpInfoAsync(CreateMyReportDto createMyReportDto = default(CreateMyReportDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMyReportDto;

            localVarRequestOptions.Operation = "ReportApi.CreateMyReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Report", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMyReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playpactReportId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteReport(Guid? playpactReportId = default(Guid?), int operationIndex = 0)
        {
            DeleteReportWithHttpInfo(playpactReportId);
        }

        /// <summary>
        /// Deletes a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playpactReportId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<Object> DeleteReportWithHttpInfo(Guid? playpactReportId = default(Guid?), int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (playpactReportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(PlayPact.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "playpactReportId", playpactReportId));
            }

            localVarRequestOptions.Operation = "ReportApi.DeleteReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/Report", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playpactReportId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReportAsync(Guid? playpactReportId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteReportWithHttpInfoAsync(playpactReportId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playpactReportId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<Object>> DeleteReportWithHttpInfoAsync(Guid? playpactReportId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (playpactReportId != null)
            {
                localVarRequestOptions.QueryParameters.Add(PlayPact.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "playpactReportId", playpactReportId));
            }

            localVarRequestOptions.Operation = "ReportApi.DeleteReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/Report", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets your report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MyReportDto</returns>
        public MyReportDto GetMyReport(Guid playPactReportId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.ApiResponse<MyReportDto> localVarResponse = GetMyReportWithHttpInfo(playPactReportId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets your report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MyReportDto</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<MyReportDto> GetMyReportWithHttpInfo(Guid playPactReportId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactReportId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactReportId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetMyReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MyReportDto>("/api/Report/my/{playPactReportId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets your report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MyReportDto</returns>
        public async System.Threading.Tasks.Task<MyReportDto> GetMyReportAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PlayPact.OpenAPI.Client.ApiResponse<MyReportDto> localVarResponse = await GetMyReportWithHttpInfoAsync(playPactReportId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets your report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MyReportDto)</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<MyReportDto>> GetMyReportWithHttpInfoAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactReportId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactReportId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetMyReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MyReportDto>("/api/Report/my/{playPactReportId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MyReportListDto&gt;</returns>
        public List<MyReportListDto> GetMyReports(Guid playPactUserId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.ApiResponse<List<MyReportListDto>> localVarResponse = GetMyReportsWithHttpInfo(playPactUserId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MyReportListDto&gt;</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<List<MyReportListDto>> GetMyReportsWithHttpInfo(Guid playPactUserId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactUserId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactUserId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetMyReports";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MyReportListDto>>("/api/Report/my/list/{playPactUserId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyReports", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MyReportListDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<MyReportListDto>> GetMyReportsAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PlayPact.OpenAPI.Client.ApiResponse<List<MyReportListDto>> localVarResponse = await GetMyReportsWithHttpInfoAsync(playPactUserId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MyReportListDto&gt;)</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<List<MyReportListDto>>> GetMyReportsWithHttpInfoAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactUserId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactUserId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetMyReports";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MyReportListDto>>("/api/Report/my/list/{playPactUserId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyReports", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReportDto</returns>
        public ReportDto GetReport(Guid playPactReportId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.ApiResponse<ReportDto> localVarResponse = GetReportWithHttpInfo(playPactReportId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReportDto</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<ReportDto> GetReportWithHttpInfo(Guid playPactReportId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactReportId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactReportId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReportDto>("/api/Report/review/{playPactReportId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReportDto</returns>
        public async System.Threading.Tasks.Task<ReportDto> GetReportAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PlayPact.OpenAPI.Client.ApiResponse<ReportDto> localVarResponse = await GetReportWithHttpInfoAsync(playPactReportId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReportDto)</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<ReportDto>> GetReportWithHttpInfoAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactReportId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactReportId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReportDto>("/api/Report/review/{playPactReportId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReviewerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ReportListDto&gt;</returns>
        public List<ReportListDto> GetReviewReports(Guid playPactReviewerId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.ApiResponse<List<ReportListDto>> localVarResponse = GetReviewReportsWithHttpInfo(playPactReviewerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReviewerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ReportListDto&gt;</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<List<ReportListDto>> GetReviewReportsWithHttpInfo(Guid playPactReviewerId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactReviewerId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactReviewerId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetReviewReports";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ReportListDto>>("/api/Report/review/list/{playPactReviewerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReviewReports", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReviewerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ReportListDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReportListDto>> GetReviewReportsAsync(Guid playPactReviewerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PlayPact.OpenAPI.Client.ApiResponse<List<ReportListDto>> localVarResponse = await GetReviewReportsWithHttpInfoAsync(playPactReviewerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReviewerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ReportListDto&gt;)</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<List<ReportListDto>>> GetReviewReportsWithHttpInfoAsync(Guid playPactReviewerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactReviewerId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactReviewerId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetReviewReports";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReportListDto>>("/api/Report/review/list/{playPactReviewerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReviewReports", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a verdict. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerdictDto</returns>
        public VerdictDto GetVerdict(Guid playPactReportId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.ApiResponse<VerdictDto> localVarResponse = GetVerdictWithHttpInfo(playPactReportId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a verdict. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerdictDto</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<VerdictDto> GetVerdictWithHttpInfo(Guid playPactReportId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactReportId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactReportId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetVerdict";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VerdictDto>("/api/Report/verdict/{playPactReportId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerdict", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a verdict. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerdictDto</returns>
        public async System.Threading.Tasks.Task<VerdictDto> GetVerdictAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PlayPact.OpenAPI.Client.ApiResponse<VerdictDto> localVarResponse = await GetVerdictWithHttpInfoAsync(playPactReportId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a verdict. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerdictDto)</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<VerdictDto>> GetVerdictWithHttpInfoAsync(Guid playPactReportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactReportId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactReportId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetVerdict";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VerdictDto>("/api/Report/verdict/{playPactReportId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerdict", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;VerdictListDto&gt;</returns>
        public List<VerdictListDto> GetVerdicts(Guid playPactUserId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.ApiResponse<List<VerdictListDto>> localVarResponse = GetVerdictsWithHttpInfo(playPactUserId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;VerdictListDto&gt;</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<List<VerdictListDto>> GetVerdictsWithHttpInfo(Guid playPactUserId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactUserId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactUserId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetVerdicts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<VerdictListDto>>("/api/Report/verdict/list/{playPactUserId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerdicts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;VerdictListDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<VerdictListDto>> GetVerdictsAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PlayPact.OpenAPI.Client.ApiResponse<List<VerdictListDto>> localVarResponse = await GetVerdictsWithHttpInfoAsync(playPactUserId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all reports. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;VerdictListDto&gt;)</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<List<VerdictListDto>>> GetVerdictsWithHttpInfoAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactUserId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactUserId)); // path parameter

            localVarRequestOptions.Operation = "ReportApi.GetVerdicts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<VerdictListDto>>("/api/Report/verdict/list/{playPactUserId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerdicts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="myReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateMyReport(Guid? playPactUserId = default(Guid?), MyReportDto myReportDto = default(MyReportDto), int operationIndex = 0)
        {
            UpdateMyReportWithHttpInfo(playPactUserId, myReportDto);
        }

        /// <summary>
        /// Updates a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="myReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<Object> UpdateMyReportWithHttpInfo(Guid? playPactUserId = default(Guid?), MyReportDto myReportDto = default(MyReportDto), int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (playPactUserId != null)
            {
                localVarRequestOptions.QueryParameters.Add(PlayPact.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "playPactUserId", playPactUserId));
            }
            localVarRequestOptions.Data = myReportDto;

            localVarRequestOptions.Operation = "ReportApi.UpdateMyReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/Report", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMyReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="myReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMyReportAsync(Guid? playPactUserId = default(Guid?), MyReportDto myReportDto = default(MyReportDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateMyReportWithHttpInfoAsync(playPactUserId, myReportDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a report. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="myReportDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<Object>> UpdateMyReportWithHttpInfoAsync(Guid? playPactUserId = default(Guid?), MyReportDto myReportDto = default(MyReportDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (playPactUserId != null)
            {
                localVarRequestOptions.QueryParameters.Add(PlayPact.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "playPactUserId", playPactUserId));
            }
            localVarRequestOptions.Data = myReportDto;

            localVarRequestOptions.Operation = "ReportApi.UpdateMyReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/Report", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMyReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a report status. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="reportStatus"> (optional)</param>
        /// <param name="isSystemUpdate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateReportStatus(Guid playPactReportId, Guid? playPactUserId = default(Guid?), ReportStatus? reportStatus = default(ReportStatus?), bool? isSystemUpdate = default(bool?), int operationIndex = 0)
        {
            UpdateReportStatusWithHttpInfo(playPactReportId, playPactUserId, reportStatus, isSystemUpdate);
        }

        /// <summary>
        /// Updates a report status. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="reportStatus"> (optional)</param>
        /// <param name="isSystemUpdate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<Object> UpdateReportStatusWithHttpInfo(Guid playPactReportId, Guid? playPactUserId = default(Guid?), ReportStatus? reportStatus = default(ReportStatus?), bool? isSystemUpdate = default(bool?), int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactReportId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactReportId)); // path parameter
            if (playPactUserId != null)
            {
                localVarRequestOptions.QueryParameters.Add(PlayPact.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "playPactUserId", playPactUserId));
            }
            if (reportStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(PlayPact.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "reportStatus", reportStatus));
            }
            if (isSystemUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(PlayPact.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isSystemUpdate", isSystemUpdate));
            }

            localVarRequestOptions.Operation = "ReportApi.UpdateReportStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/Report/status/{playPactReportId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReportStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a report status. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="reportStatus"> (optional)</param>
        /// <param name="isSystemUpdate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateReportStatusAsync(Guid playPactReportId, Guid? playPactUserId = default(Guid?), ReportStatus? reportStatus = default(ReportStatus?), bool? isSystemUpdate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateReportStatusWithHttpInfoAsync(playPactReportId, playPactUserId, reportStatus, isSystemUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a report status. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactReportId"></param>
        /// <param name="playPactUserId"> (optional)</param>
        /// <param name="reportStatus"> (optional)</param>
        /// <param name="isSystemUpdate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<Object>> UpdateReportStatusWithHttpInfoAsync(Guid playPactReportId, Guid? playPactUserId = default(Guid?), ReportStatus? reportStatus = default(ReportStatus?), bool? isSystemUpdate = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactReportId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactReportId)); // path parameter
            if (playPactUserId != null)
            {
                localVarRequestOptions.QueryParameters.Add(PlayPact.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "playPactUserId", playPactUserId));
            }
            if (reportStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(PlayPact.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "reportStatus", reportStatus));
            }
            if (isSystemUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(PlayPact.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "isSystemUpdate", isSystemUpdate));
            }

            localVarRequestOptions.Operation = "ReportApi.UpdateReportStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/Report/status/{playPactReportId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReportStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

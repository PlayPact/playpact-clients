/*
 * PlayPact API
 *
 * The API for PlayPact.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@playpact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PlayPact.OpenAPI.Client;
using PlayPact.OpenAPI.Model;

namespace PlayPact.OpenAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a server.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="createMyServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateServer(Guid playPactUserId, CreateMyServerDto createMyServerDto = default(CreateMyServerDto), int operationIndex = 0);

        /// <summary>
        /// Creates a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="createMyServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateServerWithHttpInfo(Guid playPactUserId, CreateMyServerDto createMyServerDto = default(CreateMyServerDto), int operationIndex = 0);
        /// <summary>
        /// Deletes a server.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteServer(Guid playPactUserId, Guid playPactServerId, int operationIndex = 0);

        /// <summary>
        /// Deletes a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteServerWithHttpInfo(Guid playPactUserId, Guid playPactServerId, int operationIndex = 0);
        /// <summary>
        /// Gets a server.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MyServerDto</returns>
        MyServerDto GetMyServer(Guid playPactServerId, int operationIndex = 0);

        /// <summary>
        /// Gets a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MyServerDto</returns>
        ApiResponse<MyServerDto> GetMyServerWithHttpInfo(Guid playPactServerId, int operationIndex = 0);
        /// <summary>
        /// Gets all servers created by an user.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MyServerListDto&gt;</returns>
        List<MyServerListDto> GetMyServers(Guid playPactUserId, int operationIndex = 0);

        /// <summary>
        /// Gets all servers created by an user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MyServerListDto&gt;</returns>
        ApiResponse<List<MyServerListDto>> GetMyServersWithHttpInfo(Guid playPactUserId, int operationIndex = 0);
        /// <summary>
        /// Gets a server.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServerDto</returns>
        ServerDto GetServer(Guid playPactServerId, int operationIndex = 0);

        /// <summary>
        /// Gets a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServerDto</returns>
        ApiResponse<ServerDto> GetServerWithHttpInfo(Guid playPactServerId, int operationIndex = 0);
        /// <summary>
        /// Gets all servers.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ServerListDto&gt;</returns>
        List<ServerListDto> GetServers(int operationIndex = 0);

        /// <summary>
        /// Gets all servers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ServerListDto&gt;</returns>
        ApiResponse<List<ServerListDto>> GetServersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// TODO: Updates the metadata of a server.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateMetaData(int operationIndex = 0);

        /// <summary>
        /// TODO: Updates the metadata of a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMetaDataWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Updates a server.
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="myServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateMyServer(string playPactServerId, MyServerDto myServerDto = default(MyServerDto), int operationIndex = 0);

        /// <summary>
        /// Updates a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="myServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMyServerWithHttpInfo(string playPactServerId, MyServerDto myServerDto = default(MyServerDto), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="createMyServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateServerAsync(Guid playPactUserId, CreateMyServerDto createMyServerDto = default(CreateMyServerDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="createMyServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateServerWithHttpInfoAsync(Guid playPactUserId, CreateMyServerDto createMyServerDto = default(CreateMyServerDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteServerAsync(Guid playPactUserId, Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteServerWithHttpInfoAsync(Guid playPactUserId, Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MyServerDto</returns>
        System.Threading.Tasks.Task<MyServerDto> GetMyServerAsync(Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MyServerDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MyServerDto>> GetMyServerWithHttpInfoAsync(Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets all servers created by an user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MyServerListDto&gt;</returns>
        System.Threading.Tasks.Task<List<MyServerListDto>> GetMyServersAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all servers created by an user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MyServerListDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MyServerListDto>>> GetMyServersWithHttpInfoAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServerDto</returns>
        System.Threading.Tasks.Task<ServerDto> GetServerAsync(Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServerDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServerDto>> GetServerWithHttpInfoAsync(Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets all servers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServerListDto&gt;</returns>
        System.Threading.Tasks.Task<List<ServerListDto>> GetServersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all servers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServerListDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServerListDto>>> GetServersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// TODO: Updates the metadata of a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMetaDataAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// TODO: Updates the metadata of a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMetaDataWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="myServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMyServerAsync(string playPactServerId, MyServerDto myServerDto = default(MyServerDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="myServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMyServerWithHttpInfoAsync(string playPactServerId, MyServerDto myServerDto = default(MyServerDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServerApi : IServerApiSync, IServerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServerApi : IServerApi
    {
        private PlayPact.OpenAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServerApi(string basePath)
        {
            this.Configuration = PlayPact.OpenAPI.Client.Configuration.MergeConfigurations(
                PlayPact.OpenAPI.Client.GlobalConfiguration.Instance,
                new PlayPact.OpenAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PlayPact.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PlayPact.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PlayPact.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServerApi(PlayPact.OpenAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PlayPact.OpenAPI.Client.Configuration.MergeConfigurations(
                PlayPact.OpenAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PlayPact.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PlayPact.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PlayPact.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ServerApi(PlayPact.OpenAPI.Client.ISynchronousClient client, PlayPact.OpenAPI.Client.IAsynchronousClient asyncClient, PlayPact.OpenAPI.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PlayPact.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PlayPact.OpenAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PlayPact.OpenAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PlayPact.OpenAPI.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PlayPact.OpenAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="createMyServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateServer(Guid playPactUserId, CreateMyServerDto createMyServerDto = default(CreateMyServerDto), int operationIndex = 0)
        {
            CreateServerWithHttpInfo(playPactUserId, createMyServerDto);
        }

        /// <summary>
        /// Creates a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="createMyServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<Object> CreateServerWithHttpInfo(Guid playPactUserId, CreateMyServerDto createMyServerDto = default(CreateMyServerDto), int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactUserId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactUserId)); // path parameter
            localVarRequestOptions.Data = createMyServerDto;

            localVarRequestOptions.Operation = "ServerApi.CreateServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Server/{playPactUserId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="createMyServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateServerAsync(Guid playPactUserId, CreateMyServerDto createMyServerDto = default(CreateMyServerDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateServerWithHttpInfoAsync(playPactUserId, createMyServerDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="createMyServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<Object>> CreateServerWithHttpInfoAsync(Guid playPactUserId, CreateMyServerDto createMyServerDto = default(CreateMyServerDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactUserId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactUserId)); // path parameter
            localVarRequestOptions.Data = createMyServerDto;

            localVarRequestOptions.Operation = "ServerApi.CreateServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Server/{playPactUserId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteServer(Guid playPactUserId, Guid playPactServerId, int operationIndex = 0)
        {
            DeleteServerWithHttpInfo(playPactUserId, playPactServerId);
        }

        /// <summary>
        /// Deletes a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<Object> DeleteServerWithHttpInfo(Guid playPactUserId, Guid playPactServerId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactUserId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactUserId)); // path parameter
            localVarRequestOptions.PathParameters.Add("playPactServerId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactServerId)); // path parameter

            localVarRequestOptions.Operation = "ServerApi.DeleteServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/Server/{playPactUserId}/{playPactServerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteServerAsync(Guid playPactUserId, Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteServerWithHttpInfoAsync(playPactUserId, playPactServerId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<Object>> DeleteServerWithHttpInfoAsync(Guid playPactUserId, Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactUserId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactUserId)); // path parameter
            localVarRequestOptions.PathParameters.Add("playPactServerId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactServerId)); // path parameter

            localVarRequestOptions.Operation = "ServerApi.DeleteServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/Server/{playPactUserId}/{playPactServerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MyServerDto</returns>
        public MyServerDto GetMyServer(Guid playPactServerId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.ApiResponse<MyServerDto> localVarResponse = GetMyServerWithHttpInfo(playPactServerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MyServerDto</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<MyServerDto> GetMyServerWithHttpInfo(Guid playPactServerId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactServerId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactServerId)); // path parameter

            localVarRequestOptions.Operation = "ServerApi.GetMyServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MyServerDto>("/api/Server/my/{playPactServerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MyServerDto</returns>
        public async System.Threading.Tasks.Task<MyServerDto> GetMyServerAsync(Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PlayPact.OpenAPI.Client.ApiResponse<MyServerDto> localVarResponse = await GetMyServerWithHttpInfoAsync(playPactServerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MyServerDto)</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<MyServerDto>> GetMyServerWithHttpInfoAsync(Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactServerId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactServerId)); // path parameter

            localVarRequestOptions.Operation = "ServerApi.GetMyServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MyServerDto>("/api/Server/my/{playPactServerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all servers created by an user. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MyServerListDto&gt;</returns>
        public List<MyServerListDto> GetMyServers(Guid playPactUserId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.ApiResponse<List<MyServerListDto>> localVarResponse = GetMyServersWithHttpInfo(playPactUserId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all servers created by an user. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MyServerListDto&gt;</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<List<MyServerListDto>> GetMyServersWithHttpInfo(Guid playPactUserId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactUserId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactUserId)); // path parameter

            localVarRequestOptions.Operation = "ServerApi.GetMyServers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MyServerListDto>>("/api/Server/my/list/{playPactUserId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all servers created by an user. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MyServerListDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<MyServerListDto>> GetMyServersAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PlayPact.OpenAPI.Client.ApiResponse<List<MyServerListDto>> localVarResponse = await GetMyServersWithHttpInfoAsync(playPactUserId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all servers created by an user. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactUserId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MyServerListDto&gt;)</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<List<MyServerListDto>>> GetMyServersWithHttpInfoAsync(Guid playPactUserId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactUserId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactUserId)); // path parameter

            localVarRequestOptions.Operation = "ServerApi.GetMyServers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MyServerListDto>>("/api/Server/my/list/{playPactUserId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServerDto</returns>
        public ServerDto GetServer(Guid playPactServerId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.ApiResponse<ServerDto> localVarResponse = GetServerWithHttpInfo(playPactServerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServerDto</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<ServerDto> GetServerWithHttpInfo(Guid playPactServerId, int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactServerId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactServerId)); // path parameter

            localVarRequestOptions.Operation = "ServerApi.GetServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServerDto>("/api/Server/{playPactServerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServerDto</returns>
        public async System.Threading.Tasks.Task<ServerDto> GetServerAsync(Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PlayPact.OpenAPI.Client.ApiResponse<ServerDto> localVarResponse = await GetServerWithHttpInfoAsync(playPactServerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServerDto)</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<ServerDto>> GetServerWithHttpInfoAsync(Guid playPactServerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactServerId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactServerId)); // path parameter

            localVarRequestOptions.Operation = "ServerApi.GetServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServerDto>("/api/Server/{playPactServerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all servers. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ServerListDto&gt;</returns>
        public List<ServerListDto> GetServers(int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.ApiResponse<List<ServerListDto>> localVarResponse = GetServersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all servers. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ServerListDto&gt;</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<List<ServerListDto>> GetServersWithHttpInfo(int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServerApi.GetServers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ServerListDto>>("/api/Server/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all servers. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServerListDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServerListDto>> GetServersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            PlayPact.OpenAPI.Client.ApiResponse<List<ServerListDto>> localVarResponse = await GetServersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all servers. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServerListDto&gt;)</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<List<ServerListDto>>> GetServersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServerApi.GetServers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ServerListDto>>("/api/Server/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO: Updates the metadata of a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateMetaData(int operationIndex = 0)
        {
            UpdateMetaDataWithHttpInfo();
        }

        /// <summary>
        /// TODO: Updates the metadata of a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<Object> UpdateMetaDataWithHttpInfo(int operationIndex = 0)
        {
            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServerApi.UpdateMetaData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/Server/metadata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMetaData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO: Updates the metadata of a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMetaDataAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateMetaDataWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// TODO: Updates the metadata of a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<Object>> UpdateMetaDataWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServerApi.UpdateMetaData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/Server/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMetaData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="myServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateMyServer(string playPactServerId, MyServerDto myServerDto = default(MyServerDto), int operationIndex = 0)
        {
            UpdateMyServerWithHttpInfo(playPactServerId, myServerDto);
        }

        /// <summary>
        /// Updates a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="myServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PlayPact.OpenAPI.Client.ApiResponse<Object> UpdateMyServerWithHttpInfo(string playPactServerId, MyServerDto myServerDto = default(MyServerDto), int operationIndex = 0)
        {
            // verify the required parameter 'playPactServerId' is set
            if (playPactServerId == null)
            {
                throw new PlayPact.OpenAPI.Client.ApiException(400, "Missing required parameter 'playPactServerId' when calling ServerApi->UpdateMyServer");
            }

            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactServerId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactServerId)); // path parameter
            localVarRequestOptions.Data = myServerDto;

            localVarRequestOptions.Operation = "ServerApi.UpdateMyServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/Server/{playPactServerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMyServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="myServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMyServerAsync(string playPactServerId, MyServerDto myServerDto = default(MyServerDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateMyServerWithHttpInfoAsync(playPactServerId, myServerDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a server. 
        /// </summary>
        /// <exception cref="PlayPact.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playPactServerId"></param>
        /// <param name="myServerDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PlayPact.OpenAPI.Client.ApiResponse<Object>> UpdateMyServerWithHttpInfoAsync(string playPactServerId, MyServerDto myServerDto = default(MyServerDto), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playPactServerId' is set
            if (playPactServerId == null)
            {
                throw new PlayPact.OpenAPI.Client.ApiException(400, "Missing required parameter 'playPactServerId' when calling ServerApi->UpdateMyServer");
            }


            PlayPact.OpenAPI.Client.RequestOptions localVarRequestOptions = new PlayPact.OpenAPI.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PlayPact.OpenAPI.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playPactServerId", PlayPact.OpenAPI.Client.ClientUtils.ParameterToString(playPactServerId)); // path parameter
            localVarRequestOptions.Data = myServerDto;

            localVarRequestOptions.Operation = "ServerApi.UpdateMyServer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/Server/{playPactServerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMyServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

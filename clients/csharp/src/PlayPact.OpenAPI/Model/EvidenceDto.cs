/*
 * PlayPact API
 *
 * The API for PlayPact.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@playpact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PlayPact.OpenAPI.Client.OpenAPIDateConverter;

namespace PlayPact.OpenAPI.Model
{
    /// <summary>
    /// EvidenceDto
    /// </summary>
    [DataContract(Name = "EvidenceDto")]
    public partial class EvidenceDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FileType
        /// </summary>
        [DataMember(Name = "fileType", EmitDefaultValue = false)]
        public FileType? FileType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EvidenceDto" /> class.
        /// </summary>
        /// <param name="playPactId">playPactId.</param>
        /// <param name="uploader">uploader.</param>
        /// <param name="description">description.</param>
        /// <param name="fileType">fileType.</param>
        /// <param name="blobStorageUri">blobStorageUri.</param>
        public EvidenceDto(Guid playPactId = default(Guid), UserListDto uploader = default(UserListDto), string description = default(string), FileType? fileType = default(FileType?), string blobStorageUri = default(string))
        {
            this.PlayPactId = playPactId;
            this.Uploader = uploader;
            this.Description = description;
            this.FileType = fileType;
            this.BlobStorageUri = blobStorageUri;
        }

        /// <summary>
        /// Gets or Sets PlayPactId
        /// </summary>
        [DataMember(Name = "playPactId", EmitDefaultValue = false)]
        public Guid PlayPactId { get; set; }

        /// <summary>
        /// Gets or Sets Uploader
        /// </summary>
        [DataMember(Name = "uploader", EmitDefaultValue = false)]
        public UserListDto Uploader { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets BlobStorageUri
        /// </summary>
        [DataMember(Name = "blobStorageUri", EmitDefaultValue = true)]
        public string BlobStorageUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EvidenceDto {\n");
            sb.Append("  PlayPactId: ").Append(PlayPactId).Append("\n");
            sb.Append("  Uploader: ").Append(Uploader).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  BlobStorageUri: ").Append(BlobStorageUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

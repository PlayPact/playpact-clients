/*
 * PlayPact API
 * The API for PlayPact.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@playpact.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PactPointHistoryDto;
import org.openapitools.client.model.PlatformIdentifierDto;
import org.openapitools.client.model.PlatformIdentifierEnumDto;
import org.openapitools.client.model.ServerChallengeDto;
import java.util.UUID;
import org.openapitools.client.model.UserDto;
import org.openapitools.client.model.UserListDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Gets a users pact point history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPactPointHistoryTest() throws ApiException {
        UUID playPactUserId = null;
        OffsetDateTime fromDate = null;
        OffsetDateTime toDate = null;
        List<PactPointHistoryDto> response = api.getPactPointHistory(playPactUserId, fromDate, toDate);
        // TODO: test validations
    }

    /**
     * Gets a users pact points.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPactPointsTest() throws ApiException {
        UUID playPactUserId = null;
        Integer response = api.getPactPoints(playPactUserId);
        // TODO: test validations
    }

    /**
     * Gets the platform identifiers for a player.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlatformIdentifiersTest() throws ApiException {
        UUID playPactUserId = null;
        PlatformIdentifierDto response = api.getPlatformIdentifiers(playPactUserId);
        // TODO: test validations
    }

    /**
     * Gets a user by their PlayPact identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        UUID playPactUserId = null;
        UserDto response = api.getUser(playPactUserId);
        // TODO: test validations
    }

    /**
     * Gets all users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        List<UserListDto> response = api.getUsers();
        // TODO: test validations
    }

    /**
     * Registers a user to play pact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerPlayPactUserTest() throws ApiException {
        String username = null;
        String supabaseUUID = null;
        api.registerPlayPactUser(username, supabaseUUID);
        // TODO: test validations
    }

    /**
     * Updates the platform identifiers for a player.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatesAUsersPlatformIdentifiersTest() throws ApiException {
        UUID playPactUserId = null;
        PlatformIdentifierDto platformIdentifierDto = null;
        api.updatesAUsersPlatformIdentifiers(playPactUserId, platformIdentifierDto);
        // TODO: test validations
    }

    /**
     * TODO: Tells PlayPact that a user has been banned from a server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userBannedFromServerTest() throws ApiException {
        api.userBannedFromServer();
        // TODO: test validations
    }

    /**
     * Todo: Returns if the given player can join the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userChallengesServerLoginTest() throws ApiException {
        PlatformIdentifierEnumDto platform = null;
        ServerChallengeDto serverChallengeDto = null;
        Boolean response = api.userChallengesServerLogin(platform, serverChallengeDto);
        // TODO: test validations
    }

    /**
     * TODO: Tells PlayPact that a user has joined on a server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userJoinedServerTest() throws ApiException {
        api.userJoinedServer();
        // TODO: test validations
    }

    /**
     * TODO: Tells PlayPact that a user has been kicked from a server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userKickedFromServerTest() throws ApiException {
        api.userKickedFromServer();
        // TODO: test validations
    }

    /**
     * TODO: Tells PlayPact that a user has left a server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userLeftServerTest() throws ApiException {
        api.userLeftServer();
        // TODO: test validations
    }

}
